@INPROCEEDINGS{Testing,
  author={Straubinger, Philipp and Fraser, Gordon},
  booktitle={2023 IEEE 34th International Symposium on Software Reliability Engineering (ISSRE)}, 
  title={A Survey on What Developers Think About Testing}, 
  year={2023},
  volume={},
  number={},
  pages={80-90},
  doi={10.1109/ISSRE59848.2023.00075}
}

@techreport{PoorCost,
author = {Herb Krasner},
title = {The Cost of Poor Software Quality in the US: A 2020 Report}, year = {2021},
source = {https://www.it-cisq.org/the-cost-of-poor-software-quality-in-the-us-a-2020-report/},
publisher = {The Consortium for Information & Software Quality},
address = {Carnegie Mellon University, Pennsylvania, USA},
}

@article{CodePractices,
author = {Mcintosh, Shane and Kamei, Yasutaka and Adams, Bram and Hassan, Ahmed E.},
title = {An Empirical Study of the Impact of Modern Code Review Practices on Software Quality},
year = {2016},
issue_date = {October   2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {21},
number = {5},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-015-9381-9},
doi = {10.1007/s10664-015-9381-9},
abstract = {Software code review, i.e., the practice of having other team members critique changes to a software system, is a well-established best practice in both open source and proprietary software domains. Prior work has shown that formal code inspections tend to improve the quality of delivered software. However, the formal code inspection process mandates strict review criteria (e.g., in-person meetings and reviewer checklists) to ensure a base level of review quality, while the modern, lightweight code reviewing process does not. Although recent work explores the modern code review process, little is known about the relationship between modern code review practices and long-term software quality. Hence, in this paper, we study the relationship between post-release defects (a popular proxy for long-term software quality) and: (1) code review coverage, i.e., the proportion of changes that have been code reviewed, (2) code review participation, i.e., the degree of reviewer involvement in the code review process, and (3) code reviewer expertise, i.e., the level of domain-specific expertise of the code reviewers. Through a case study of the Qt, VTK, and ITK projects, we find that code review coverage, participation, and expertise share a significant link with software quality. Hence, our results empirically confirm the intuition that poorly-reviewed code has a negative impact on software quality in large systems using modern reviewing tools.},
journal = {Empirical Softw. Engg.},
month = {oct},
pages = {2146–2189},
numpages = {44},
keywords = {Code review, Software quality}
}

@ARTICLE{APR,
  author={Winter, Emily and Bowes, David and Counsell, Steve and Hall, Tracy and Haraldsson, Sæmundur and Nowack, Vesna and Woodward, John},
  journal={IEEE Transactions on Software Engineering}, 
  title={How do Developers Really Feel About Bug Fixing? Directions for Automatic Program Repair}, 
  year={2023},
  volume={49},
  number={4},
  pages={1823-1841},
  doi={10.1109/TSE.2022.3194188}
}

@article{BugChanges,
title = {Developers’ viewpoints to avoid bug-introducing changes},
journal = {Information and Software Technology},
volume = {143},
pages = {106766},
year = {2022},
issn = {0950-5849},
doi = {https://doi.org/10.1016/j.infsof.2021.106766},
url = {https://www.sciencedirect.com/science/article/pii/S095058492100210X},
author = {Jairo Souza and Rodrigo Lima and Baldoino Fonseca and Bruno Cartaxo and Márcio Ribeiro and Gustavo Pinto and Rohit Gheyi and Alessandro Garcia},
keywords = {Bugs-introducing changes, Developers’ viewpoints, Q-Methodology},
abstract = {Context:
During software development, developers can make assumptions that guide their development practices to avoid bug-introducing changes. For instance, developers may consider that code with low test coverage is more likely to introduce bugs; and thus, focus their attention on that code to avoid bugs, neglecting other factors during the software development process. However, there is no knowledge about the relevance of these assumptions for developers.
Objective:
This study investigates the developers’ viewpoints on the relevance of certain assumptions to avoid bug-introducing changes. In particular, we analyze which assumptions developers can make during software development; how relevant these assumptions are for developers; the common viewpoints among developers regarding these assumptions; and the main reasons for developers to put more/less relevance for some assumptions.
Method:
We applied the Q-methodology, a mixed-method from the psychometric spectrum, to investigate the relevance of assumptions and extract the developers’ viewpoints systematically. We involved 41 developers analyzing 41 assumptions extracted from literature and personal interviews.
Results:
We identified five viewpoints among developers regarding their assumptions around bug-introducing changes. Despite the differences among the viewpoints, there is also consensus, for example, regarding the importance of being aware of changes invoking high number of features. Moreover, developers rely on personal and technical reasons to put relevance on some assumptions.
Conclusion:
These findings are valuable knowledge for practitioners and researchers towards future research directions and development practices improvements.}
}

@misc{Mutalapov_Survey_on_the_2023,
author = {Mutalapov, Arsen and Almetov, Kamil and Alifanov, Vitaly and Kornienko, Ivan},
month = dec,
title = {{Survey on the programmers attitude towards bug reporting}},
url = {https://github.com/system205/AcademicResearch},
year = {2023}
}

@book{QuestionnaireBook,
author = {Gillham},
title = {Developing a Questionnaire (2nd ed.)},
year = {2008},
isbn = {0-471-38804-1},
publisher = {Continuum}, 
address = {London, United Kingdom},
}
